{"version":3,"sources":["CardSection.js","App.js","index.js"],"names":["stylez","card","margin","width","display","top","textAlign","breadcrumb","position","backgroundColor","cardSection","cardList","marginLeft","marginBottom","borderRadius","overflowY","cardText","height","overflow","cardIcon","float","detailButton","backButtonSection","bottom","padding","CardSection","props","state","cards","links","onDetailsClicked","bind","generateCardsList","generatebreadcrumb","this","push","header","setState","pop","length","indexOfBrdC","hyperlink","window","open","cardsList","map","Card","style","key","id","align","CardContent","Avatar","variant","Typography","text","CardActions","hyperlinkText","Button","onClick","openThisLink","disabled","brdC","onBreadcrumbClicked","indexOf","color","onBackClicked","React","Component","useStyles","makeStyles","root","app","cardsSection","notCardSection","App","data","className","subheader","require","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ae0ec63.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardActions, CardContent } from \"@material-ui/core\";\r\nimport { Button, Typography } from \"@material-ui/core\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport AssignmentIcon from \"@material-ui/icons/Assignment\";\r\n\r\nconst stylez = {\r\n  card: {\r\n    margin: \"10px\",\r\n    width: \"300px\",\r\n    // float: \"left\",\r\n    display: \"inline-block\",\r\n    top: \"0\",\r\n    textAlign: \"centre\"\r\n  },\r\n  breadcrumb: {\r\n    width: \"100vw\",\r\n    position: \"sticky\",\r\n    top: \"0\",\r\n    backgroundColor: \"white\"\r\n  },\r\n  cardSection: {},\r\n  cardList: {\r\n    backgroundColor: \"lightgrey\",\r\n    marginLeft: \"3%\",\r\n    marginBottom: \"50px\",\r\n    width: \"95%\",\r\n    borderRadius: \"5px\",\r\n    overflowY: \"auto\"\r\n  },\r\n  cardText: {\r\n    height: \"100px\",\r\n    overflow: \"auto\",\r\n    width: \"100%\"\r\n  },\r\n  cardIcon: {\r\n    float: \"left\"\r\n  },\r\n  detailButton: {\r\n    float: \"right\"\r\n  },\r\n  backButtonSection: {\r\n    backgroundColor: \"white\",\r\n    position: \"fixed\",\r\n    bottom: \"0px\",\r\n    width: \"100vw\",\r\n    padding: \"5px\",\r\n    height: \"40px\"\r\n  }\r\n};\r\n\r\nclass CardSection extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cards: props.cards,\r\n      breadcrumb: [props.breadcrumb],\r\n      links: [props.cards]\r\n    };\r\n    this.onDetailsClicked = this.onDetailsClicked.bind(this);\r\n    this.generateCardsList = this.generateCardsList.bind(this);\r\n    this.generatebreadcrumb = this.generatebreadcrumb.bind(this);\r\n  }\r\n  onDetailsClicked(card) {\r\n    this.state.breadcrumb.push(card.header);\r\n    this.state.links.push(this.state.cards);\r\n    this.setState({\r\n      cards: card.cards\r\n    });\r\n  }\r\n  onBackClicked() {\r\n    this.state.breadcrumb.pop();\r\n    this.setState({\r\n      cards: this.state.links[this.state.links.length - 1]\r\n    });\r\n    this.state.links.pop();\r\n  }\r\n  onBreadcrumbClicked(indexOfBrdC) {\r\n    while (this.state.breadcrumb.length !== indexOfBrdC + 1) {\r\n      this.state.breadcrumb.pop();\r\n      this.setState({\r\n        cards: this.state.links[this.state.links.length - 1]\r\n      });\r\n      this.state.links.pop();\r\n    }\r\n  }\r\n  openThisLink(hyperlink) {\r\n    window.open(hyperlink, \"_blank\");\r\n  }\r\n  generateCardsList(cards) {\r\n    const cardsList = cards.map(card => (\r\n      <Card style={stylez.card} key={card.id} align=\"center\">\r\n        <CardContent>\r\n          <Avatar style={stylez.cardIcon} variant=\"rounded\">\r\n            <AssignmentIcon />\r\n          </Avatar>\r\n          <Typography variant=\"h6\">\r\n            {card.header}\r\n            {card.id}\r\n          </Typography>\r\n          <Typography style={stylez.cardText} variant=\"body1\">\r\n            {card.text}\r\n          </Typography>\r\n        </CardContent>\r\n        <CardActions style={stylez.detailButton}>\r\n          {card.hyperlinkText ? (\r\n            <Button onClick={this.openThisLink.bind(this, card.hyperlink)}>\r\n              {card.hyperlinkText}\r\n            </Button>\r\n          ) : (\r\n            <Button disabled>Link</Button>\r\n          )}\r\n\r\n          {card.cards ? (\r\n            <Button onClick={() => this.onDetailsClicked(card)}>Details</Button>\r\n          ) : (\r\n            <Button disabled>Details</Button>\r\n          )}\r\n        </CardActions>\r\n      </Card>\r\n    ));\r\n    return <>{cardsList}</>;\r\n  }\r\n  generatebreadcrumb() {\r\n    const breadcrumb = this.state.breadcrumb.map(brdC => (\r\n      <>\r\n        <Button\r\n          onClick={() =>\r\n            this.onBreadcrumbClicked(this.state.breadcrumb.indexOf(brdC))\r\n          }\r\n          key={this.state.breadcrumb.indexOf(brdC)}\r\n        >\r\n          {brdC}\r\n        </Button>\r\n        {\">\"}\r\n      </>\r\n    ));\r\n    return <>{breadcrumb}</>;\r\n  }\r\n  render() {\r\n    return (\r\n      <div style={stylez.cardSection}>\r\n        <div style={stylez.breadcrumb}>{this.generatebreadcrumb()}</div>\r\n        <div style={stylez.cardList}>\r\n          {this.generateCardsList(this.state.cards)}\r\n        </div>\r\n        <div style={stylez.backButtonSection}>\r\n          {this.state.breadcrumb.length > 1 ? (\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              onClick={() => this.onBackClicked()}\r\n            >\r\n              Back\r\n            </Button>\r\n          ) : (\r\n            <Button variant=\"disabled\">Back</Button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default CardSection;\r\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Typography } from \"@material-ui/core\";\nimport CardSection from \"./CardSection\";\n\nconst useStyles = makeStyles({\n  root: {},\n  app: {\n    backgroundColor: \"white\",\n    height: \"100vh\",\n    width: \"100vw\",\n    textAlign: \"center\"\n  },\n  cardsSection: {\n    width: \"100vw\"\n  },\n  notCardSection: {}\n});\n\nfunction App(props) {\n  const stylez = useStyles();\n  let data = props.data;\n  let cards = data.cards;\n  return (\n    <div className=\"App\">\n      <div className={stylez.app}>\n        <div className={stylez.notCardSection}>\n          <Typography variant=\"h3\">{data.header}</Typography>\n          <Typography variant=\"h6\">{data.subheader}</Typography>\n        </div>\n        <div className={stylez.cardsSection}>\n          <CardSection cards={cards} breadcrumb={data.header}></CardSection>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"typeface-roboto\";\n\nlet data = require(\"./data\");\nReactDOM.render(<App data={data} />, document.getElementById(\"root\"));\n"],"sourceRoot":""}